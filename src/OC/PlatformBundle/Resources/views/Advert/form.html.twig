{#
/**
 * Form template
 * 
 * @author          Christophe Malo
 * @version         1.0.0
 * @copyright       OpenClassrooms - Alexandre Bacco
 */
#}
<h3>Formulaire d'annonce</h3>

<div class="well">
    {{ form_start(form, {'attr': {'class': 'form-horizontal'}}) }}

    {# General errors of form #}
    {{ form_errors(form) }}

    {# Title #}
    <div class="form-group">
        {# Generate label #}
        {{ form_label(form.title, "Titre de l'annonce", {'label_attr': {'class': 'col-sm-3 control-label'}}) }}

        {# Display error for that specific field #}
        {{ form_errors(form.title) }}

        <div class="col-sm-4">
            {# Generate input #}
            {{ form_widget(form.title, {'attr': {'class': 'form-control'}}) }}
        </div>
    </div>

    {# Content #}
    <div class="form-group">
        {{ form_label(form.content, "Contenu de l'annonce", {'label_attr': {'class': 'col-sm-3 control-label'}}) }}
        {{ form_errors(form.title) }}
        <div class="col-sm-4">
            {{ form_widget(form.content, {'attr': {'class': 'form-control'}}) }}
        </div>
    </div>
        
        
        
        
    {# On charge la bibliothèque jQuery. #}
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>

    {# Voici le script en question : #}
    <script type="text/javascript">
      $(document).ready(function() {
        // On récupère la balise <div> en question qui contient l'attribut « data-prototype » qui nous intéresse.
        var $container = $('div#oc_platformbundle_advert_categories');

        // On ajoute un lien pour ajouter une nouvelle catégorie
        var $addLink = $('<a href="#" id="add_category" class="btn btn-default">Ajouter une catégorie</a>');
        $container.append($addLink);

        // On ajoute un nouveau champ à chaque clic sur le lien d'ajout.
        $addLink.click(function(e) {
          addCategory($container);
          e.preventDefault(); // évite qu'un # apparaisse dans l'URL
          return false;
        });

        // On définit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
        var index = $container.find(':input').length;

        // On ajoute un premier champ automatiquement s'il n'en existe pas déjà un (cas d'une nouvelle annonce par exemple).
        if (index == 0) {
          addCategory($container);
        } else {
          // Pour chaque catégorie déjà existante, on ajoute un lien de suppression
          $container.children('div').each(function() {
            addDeleteLink($(this));
          });
            }

            // La fonction qui ajoute un formulaire Categorie
            function addCategory($container) {
                // Dans le contenu de l'attribut « data-prototype », on remplace :
                // - le texte "__name__label__" qu'il contient par le label du champ
                // - le texte "__name__" qu'il contient par le numéro du champ
                var $prototype = $($container.attr('data-prototype').replace(/__name__label__/g, 'Catégorie n°' + (index + 1))
                        .replace(/__name__/g, index));

                // On ajoute au prototype un lien pour pouvoir supprimer la catégorie
                addDeleteLink($prototype);

                // On ajoute le prototype modifié à la fin de la balise <div>
                $container.append($prototype);

                // Enfin, on incrémente le compteur pour que le prochain ajout se fasse avec un autre numéro
                index++;
            }

            // La fonction qui ajoute un lien de suppression d'une catégorie
            function addDeleteLink($prototype) {
                // Création du lien
                $deleteLink = $('<a href="#" class="btn btn-danger">Supprimer</a>');

                // Ajout du lien
                $prototype.append($deleteLink);

                // Ajout du listener sur le clic du lien
                $deleteLink.click(function (e) {
                    $prototype.remove();
                    e.preventDefault(); // évite qu'un # apparaisse dans l'URL
                    return false;
                });
            }
        });
    </script>    
        
        
        

    {# Generate label + error + widget for field date #}
    {% if form.date is defined %}
        {{ form_row(form.date) }}

        {{ form_row(form.author) }}
        {{ form_row(form.published) }}
    {% endif %}
    
    {# For button, no label no error, display just widget #}
    {{ form_widget(form.save, {'attr': {'class': 'btn btn-primary'}}) }}

    {# Automatic generation of fields
       Here CSRF field (automatically managed by Symfony)
       et all hidden fields (type « hidden »). #}
    {{ form_rest(form) }}

    {# Closing tag <form> of html form #}
    {{ form_end(form) }}
</div>
